# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "600"
default_platform(:ios)

platform :ios do
 desc "Runs `pod install`"
  puts "Runs `pod install`"
  lane :pod_install do
    cocoapods(
      clean_install: true,
      podfile: "./Podfile"
    )
  end

  desc "Run swift code validation using SwiftLint"
  puts "Run swift code validation using SwiftLint"
  lane :lint do
    swiftlint(
      mode: :lint,
      ignore_exit_status: true,
      raise_if_swiftlint_error: true,
      executable: "./Pods/SwiftLint/swiftlint"
    )
  end


 desc "Incrementing Build Number"
  
  lane :increment_build do    
    version = get_version_number(xcodeproj: "MarketApp.xcodeproj")
    current_build_number = latest_testflight_build_number(version: version)
    increment_build_number(build_number: current_build_number + 1)
  end

 desc "Unit test"
  lane:unit_Test do 
  run_tests(
     workspace: "MarketApp.xcworkspace",
      scheme: "MarketApp",
      devices: ["iPhone 12"],
      reinstall_app: true,
      result_bundle: true,
      app_identifier: "com.shoping.MarketApps",
      clean: true)
       slack(
      message: "Unit test  성공",
      slack_url: ENV["SLACK_URL_TEST"],
      payload: { "Build Date" => Time.new.to_s }
    )
      
 # ✅ 에러 처리.
   error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: ENV["SLACK_URL_TEST"]
    )
     end
   end

 desc "Install Profiles and Build My App"
  lane :build_ipa do
   clear_derived_data
   scan
    slack(
      message: "Unit test  성공",
      slack_url: ENV["SLACK_URL_TEST"],
      payload: { "Build Date" => Time.new.to_s }
    )

# ✅ 에러 처리.
error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: ENV["SLACK_URL_TEST"]
    )
     end
    gym(
      configuration: "Release",
      workspace: "MarketApp.xcworkspace",
      output_name: "MarketApp.ipa",
      scheme: "MarketApp",
      export_method: "app-store",
      xcodebuild_command: "xcodebuild",
      include_bitcode: false,
     # skip_build_archive: false,
      xcodebuild_formatter: "xcpretty",
      output_directory: "./output/",
      clean: true,
      silent: true,
      include_symbols: false,
      xcargs: "ARCHIVE=YES",
     # disable_package_automatic_updates: true,
      skip_package_ipa: false,
     #skip_package_dependencies_resolution: false,
      #skip_package_pkg: false,
        export_options: {
         signingStyle: "automatic",
          uploadBitcode: false,
          provisioningProfiles: {
            "com.shoping.MarketApps" => "Affinity",
            "com.shoping.MarketApps" => "com.shoping.MarketApps AppStore"
             }
           }
       )
      slack(
      message: "빌드 성공",
      slack_url: ENV["SLACK_URL_BUILD"],
      payload: { "Build Date" => Time.new.to_s }     
    )

 # ✅ 에러 처리.
  error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: ENV["SLACK_URL_BUILD"]
    )
    end
  end

  desc "Description of what the lane does"
   lane :upload_testflight do
    version = get_version_number(
        xcodeproj: "MarketApp.xcodeproj",
        target: "MarketApp"
       )
     build = get_build_number
    get_certificates
    get_provisioning_profile
    increment_build_number(
        build_number: latest_testflight_build_number + 1
    )
    lint
    build_ipa
    upload_to_testflight(
    demo_account_required: true,
    beta_app_description:"신발 커뮤니티 앱",
    api_key_path: "fastlane/apikey.json", 
    ipa:"./output/MarketApp.ipa",
    changelog:"변경사항",
    skip_waiting_for_build_processing: true)
    slack(
      message: "Testflight 배포에 성공했습니다!",
      slack_url: ENV["SLACK_URL_UPLOAD"],
       payload: {
	"Version": version + " (" + build + ")",
        "Build Date" => Time.new.to_s 
      }
    )
 # ✅ 에러 처리.
    error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: ENV["SLACK_URL_UPLOAD"]
    )
    end
   upload_firebase
  end


 desc:"upload Firebase App Distribution"
  lane:upload_firebase do
   version = get_version_number(
        xcodeproj: "MarketApp.xcodeproj",
        target: "MarketApp"
       )
     build = get_build_number
    #get_dev_certs
    #build_ipa
    firebase_app_distribution(
     app: ENV["IOS_FIREBASE_APP_DISTRIBUTION_APP"],
      groups: "Affinity",
      #googleservice_info_plist_path: "./Firebase/GoogleService-Info.plist",
       release_notes: "upload test",debug: true)
         slack(
          message: "파이어베스  배포에 성공했습니다!",
           slack_url: ENV["SLACK_URL_UPLOAD"],
            payload: {
            "Version": version + " (" + build + ")",
             "Build Date" => Time.new.to_s
              }
             )
         # ✅ 에러 처리.
        error do |lane, exception, options|
         slack(
           message: "에러 발생 : #{exception}",
           success: false,
           slack_url: ENV["SLACK_URL_UPLOAD"]
            )
        end
     end 


 lane :get_dev_certs  do
    cert(development: true)
    sign(development: true)
 end

 desc "Description of what the lane does"
   desc "Push a new release build to the App Store"
  lane :release do |options|
  # ✅ 매개변수를 넣어서
  # fastlane release version:"2.1.0"
  # 과 같이 사용할 수 있다.
    if options[:version]
    #enable_automatic_code_signing
      increment_version_number(version_number: options[:version])
       version = get_version_number(
        xcodeproj: "MarketApp.xcodeproj",
        target: "MarketApp"
       )
     build = get_build_number
      get_certificates
      get_provisioning_profile
      build_ipa
       unit_Test
       upload_to_app_store(
        username: "shuwj81@daum.net",
        team_id: "N94CS4N6VR",
        api_key_path: "fastlane/apikey.json",
	skip_metadata: false,
        metadat_path: "./metadata",
        skip_screenshots: false, 
        force: true,
        submit_for_review: true,
        automatic_release: true,
        precheck_include_in_app_purchases: false, 
	submission_information: {
        add_id_info_uses_idfa: false,
        export_compliance_encryption_updated: false,
        export_compliance_uses_encryption: false,
        content_rights_contains_third_party_content: false}
	   )

    #성공했을때  슬랙 메세지   
      slack(
      message: "배포  성공",
      slack_url: ENV["SLACK_URL_UPLOAD"],
      payload: {
        "Version": version + " (" + build + ")",
         "Build Date" => Time.new.to_s 
      }
    )

 # ✅ 에러 처리.
   error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: ENV["SLACK_URL_UPLOAD"]
    )
     end	         
    # ✅ if 문을 종료하기 위한 end
    end
   end 
end
