# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "600"
default_platform(:ios)

platform :ios do
 desc "Runs `pod install`"
  puts "Runs `pod install`"
  lane :pod_install do
    cocoapods(
      clean_install: true,
      podfile: "./Podfile"
    )
  end

  desc "Run swift code validation using SwiftLint"
  puts "Run swift code validation using SwiftLint"
  lane :lint do
    swiftlint(
      mode: :lint,
      ignore_exit_status: true,
      raise_if_swiftlint_error: true,
      executable: "./Pods/SwiftLint/swiftlint"
    )
  end


 desc "Incrementing Build Number"
  
  lane :increment_build do    
    version = get_version_number(xcodeproj: "MarketApp.xcodeproj")
    current_build_number = latest_testflight_build_number(version: version)
    increment_build_number(build_number: current_build_number + 1)
  end

  lane:unit_Test do 
  run_tests(
     workspace: "MarketApp.xcworkspace",
      scheme: "MarketApp",
      devices: ["iPhone 13"],
      reinstall_app: true,
      app_identifier: "com.shoping.MarketApps",
      clean: true)

      slack(
      message: "Unit test  성공",
      slack_url: "https://hooks.slack.com/services/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"
    )

# ✅ 에러 처리.
error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: "https://hooks.slack.com/services/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"
    )
     end
   end


 desc "Install Profiles and Build My App"
  lane :build_ipa do
   clear_derived_data
    gym(
      configuration: "Release",
      workspace: "MarketApp.xcworkspace",
      output_name: "Affinity.ipa",
      scheme: "MarketApp",
      export_method: "app-store",
      include_bitcode: false,
      clean: true,
      silent: true,
      include_symbols: false,
      xcargs: "ARCHIVE=YES",
      disable_package_automatic_updates: true,
      skip_package_ipa: false,
      skip_package_dependencies_resolution: true,
      skip_package_pkg: false,
        export_options: {
        signingStyle: "automatic",
        compileBitcode: false,
         export_options: {
          provisioningProfiles: {
            "com.shoping.MarketApps" => "Affinity",
            "com.shoping.MarketApps" => "com.shoping.MarketApps AppStore"
             }
           }
         }
       )
	output_directory = "./output"
      Dir.mkdir(output_directory) unless File.exists?(output_directory)
      ipa_path = Dir.glob("*.ipa").first

         slack(
      username: "로이",
      message: "빌드 성공",
      slack_url: "https://hooks.slack.com/services/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"
    )

# ✅ 에러 처리.
error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: "https://hooks.slack.com/services/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"
    )
    end
      end

lane :sync_all_development do
 match(type: "development", app_identifier:"com.shoping.MarketApps")
end

  desc "Description of what the lane does"
   lane :beta do
    get_certificates
    get_provisioning_profile
    increment_build_number(
        build_number: latest_testflight_build_number + 1
    )
  lint
   build_ipa
    upload_to_testflight(api_key_path: "fastlane/apikey.json")
    slack(
      message: "Testflight 배포에 성공했습니다!",
      slack_url: "https://hooks.slack.com/services/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"
    )
  end

lane :get_dev_certs  do
    cert(development: true)
    sign(development: true)
end

desc "Description of what the lane does"
   desc "Push a new release build to the App Store"
  lane :release do |options|
  # ✅ 매개변수를 넣어서
  # fastlane release version:"2.1.0"
  # 과 같이 사용할 수 있다.
    if options[:version]
    #enable_automatic_code_signing
      increment_version_number(version_number: options[:version])
      get_certificates
      get_provisioning_profile
     #build_ipa
      unit_Test
      upload_to_app_store(
        username: "shuwj81@daum.net",
        team_id: "N94CS4N6VR",
				skip_metadata: true,
        skip_screenshots: true, 
        force: true,
        submit_for_review: true,
        automatic_release: true,
       precheck_include_in_app_purchases: false, 
				submission_information: {
       add_id_info_uses_idfa: false,
        export_compliance_encryption_updated: false,
        export_compliance_uses_encryption: false,
        content_rights_contains_third_party_content: false
			}
		)   
 	
	 slack(
      username: "로이",
      message: "배포   성공",
      slack_url: "https://hooks.slack.com/services/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"
    )

# ✅ 에러 처리.
error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: "https://hooks.slack.com/services/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"
    )
     end	         
    # ✅ if 문을 종료하기 위한 end
    end
   end 
end
